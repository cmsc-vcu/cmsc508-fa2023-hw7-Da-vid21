---
title: Homework 7 - Creating a resume database
author: Dawit Tekeste
date: last-modified
format:
    html:
        theme: cosmo
        toc: true
        embed-resources: true
        code-copy: true
---

GITHUB URL:  https://github.com/cmsc-vcu/cmsc508-fa2023-hw7-Da-vid21

This document gets some of the data from a resume database and also has a crows foot diagram of the database. It also explains some of the data/code structure in the database


```{python}
#| eval: true
#| echo: false
import os
import sys
import pandas as pd
from tabulate import tabulate
from dotenv import load_dotenv
from sqlalchemy import create_engine, text
from sqlalchemy.exc import OperationalError, ProgrammingError
from IPython.display import display, Markdown
```
```{python}
#| eval: true
#| echo: false

# modify config_map to reflect credentials needed by this program
config_map = {
    'user':'CMSC508_USER',
    'password':'CMSC508_PASSWORD',
    'host':'CMSC508_HOST',
    'database':'HW7_DB_NAME'
}
# load and store credentials
load_dotenv()
config = {}
for key in config_map.keys():
    config[key] = os.getenv(config_map[key])
flag = False
for param in config.keys():
    if config[param] is None:
        flag = True
        print(f"Missing {config_map[param]} in .env file")
#if flag:
#    sys.exit(1)
```
```{python}
#| eval: true
#| echo: false

# build a sqlalchemy engine string
engine_uri = f"mysql+pymysql://{config['user']}:{config['password']}@{config['host']}/{config['database']}"

# create a database connection.  THIS IS THE ACTUAL CONNECTION!
try:
    cnx = create_engine(engine_uri)
except ArgumentError as e:
    print(f"create_engine: Argument Error: {e}")
    #sys.exit(1)
except NoSuchModuleError as e:
    print(f"create_engine: No Such Module Error: {e}")
    #sys.exit(1)
except Exception as e:
    print(f"create_engine: An error occurred: {e}")
    #sys.exit(1)
```
```{python}
#| echo: false
#| eval: true

# Do a quick test of the connection and trap the errors better!
try:
    databases = pd.read_sql("show databases",cnx)
except ImportError as e:
    print(f"Error: {e}")
except OperationalError as e:
    print(f"Database/SQL Error:\n{str(e)}\n")
except ProgrammingError as e:
    print(f"Programming Error:\n{str(e)}\n")
except Exception as e:
    print(f"An error occurred:\n{str(e)}\n")

```

## Overview and description

This project is about building a resume database to hold each person/applicant's personal information, skills, roles, and specialization. Using a sql file to create the tables with it's attributes and add a few demo data into the table

The database is designed to be flexible and scalable, capable of accommodating a wide range of skills and roles, and suitable for various organizational sizes and types. It can be utilized to analyze skill distributions, identify training needs, manage role assignments, and support career development pathways within an organization.

### Problem Definition and Scope

This database project is designed to address the challenge of efficiently managing and tracking the skills, roles, and professional profiles of individuals within a dynamic organizational environment. The primary focus is on creating a structured and scalable database system that facilitates the cataloging of a diverse set of skills, the assignment of various roles, and the maintenance of detailed personal profiles. The intended use groups for this project encompass HR departments, team leaders, and project managers in corporate, academic, or volunteer settings. These users can leverage the database to analyze skill distributions, oversee role assignments, and support career progression within their respective organizations, thus enabling a more informed and effective management of human resources. The scope of the project, therefore, encompasses both the data structure design and the development of user-friendly interfaces for data interaction and reporting.

## Crows-foot diagram

The crow foot shows the what the database looks like with each of the distinct tables with it's attributes, unique/primary key(s) and relationships

```{mermaid}
%%| echo: false
erDiagram
    SKILLS ||--o{ PEOPLESKILLS : included-in
    PEOPLE ||--o{ PEOPLESKILLS : has
    PEOPLE ||--o{ PEOPLESKILLS : has
    PEOPLE ||--o{ PEOPLESKILLS : has
    PEOPLE ||--o{ PEOPLE-ROLES : has
    ROLES ||--o{ PEOPLE-ROLES : included-in

    PEOPLE {
        int id PK
        string first_name
        string last_name
        string email
        string linkedin_url
        string headshot_url
        string discord_handle
        string brief_bio
        date date_joined
    }
    SKILLS {
        int id PK
        string name
        string description
        string tag
        string url
        string time_commitment
    }
    ROLES {
        int id PK
        string name
        string sort_priority
    }
    PEOPLE-ROLES {
        int id PK
        int people_id FK
        int role_id FK
        date date_assigned
    }
    PEOPLESKILLS {
        int id PK
        int skills_id FK
        int people_id FK
        date date_acquired
    }
    

```

## Examples of data in the database

For the people, skills, and roles tables, provide a description of each table and it's contents. Then provide a listing of the entire table.

### People table

The **people** table contains elements that describe individuals associated with various skills and roles. It includes personal details such as names, contact information, and biographical data. This table is essential for storing and managing information about each person, including their professional and contact details.

Below is a list of data in the *people* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from people;
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### Skills table

The *skills* table contains elements that describe various skills that can be acquired or possessed by individuals. This includes detailed descriptions, categorizations, and potentially additional information like related URLs or time commitments for skill development. This table is key for tracking the range of skills available and associating them with the respective individuals in the people table.

Below is a list of data in the *skills* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from skills;
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### Roles table

The *roles* table contains elements that describe various roles or positions that individuals can hold. This includes information such as the role name and its sort priority, which could be used for organizational purposes. The roles table plays a crucial role in defining and categorizing the different types of responsibilities or positions that individuals can occupy within an organization or a project.

Below is a list of data in the *roles* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from roles;
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

## Sample queries

Let's explore the database!

# List skill names, tags, and descriptions ordered by name

```{python}
#| echo: false
#| eval: true
sql = f"""
SELECT name, tag, description FROM skills ORDER BY name;
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```


### List people names and email addresses ordered by last_name

```{python}
#| echo: false
#| eval: true
sql = """
SELECT first_name, last_name, email FROM people ORDER BY last_name;
"""
try:
    df = pd.read_sql(sql, cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

### List skill names of Person 1

```{python}
#| echo: false
#| eval: true
sql = """
SELECT skills.name FROM skills
JOIN peopleskills ON skills.id = peopleskills.skills_id
WHERE peopleskills.people_id = 1;
"""
try:
    df = pd.read_sql(sql, cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

### List people names with Skill 6

```{python}
#| echo: false
#| eval: true
sql = """
SELECT people.first_name, people.last_name FROM people
JOIN peopleskills ON people.id = peopleskills.people_id
WHERE peopleskills.skills_id = 6;
"""
try:
    df = pd.read_sql(sql, cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

### List people with a DEVELOPER role

```{python}
#| echo: false
#| eval: true
sql = """
SELECT people.first_name, people.last_name FROM people
JOIN peopleroles ON people.id = peopleroles.people_id
JOIN roles ON peopleroles.role_id = roles.id
WHERE roles.name = 'Developer';
"""
try:
    df = pd.read_sql(sql, cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

### List names and email addresses of people without skills

```{python}
#| echo: false
#| eval: true
sql = """
SELECT people.first_name, people.last_name, people.email FROM people
LEFT JOIN peopleskills ON people.id = peopleskills.people_id
WHERE peopleskills.skills_id IS NULL;
"""
try:
    df = pd.read_sql(sql, cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

### List names and tags of unused skills

```{python}
#| echo: false
#| eval: true
sql = """
SELECT skills.name, skills.tag FROM skills
LEFT JOIN peopleskills ON skills.id = peopleskills.skills_id
WHERE peopleskills.skills_id IS NULL;
"""
try:
    df = pd.read_sql(sql, cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

### List people names and skill names with the BOSS role

```{python}
#| echo: false
#| eval: true
sql = """
SELECT people.first_name, people.last_name, skills.name FROM people
JOIN peopleroles ON people.id = peopleroles.people_id
JOIN roles ON peopleroles.role_id = roles.id
JOIN peopleskills ON people.id = peopleskills.people_id
JOIN skills ON peopleskills.skills_id = skills.id
WHERE roles.name = 'Boss';
"""
try:
    df = pd.read_sql(sql, cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

### List ids and names of unused roles

```{python}
#| echo: false
#| eval: true
sql = """
SELECT roles.id, roles.name FROM roles
LEFT JOIN peopleroles ON roles.id = peopleroles.role_id
WHERE peopleroles.role_id IS NULL;
"""
try:
    df = pd.read_sql(sql, cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df

```

## Example use cases

The database can be leveraged in various ways to extract valuable information. Here are some examples

1. Identifying Skill Gaps:

        Query: List all skills not possessed by any team member in a specific department.
        Use: Helps in identifying training needs and skill gaps within a team or department.

2. Role Assignment Analysis:

        Query: Find all individuals without an assigned role.
        Use: Assists in ensuring all team members have designated roles, optimizing team organization.

3. Skill Profiling for Project Allocation:

        Query: Select individuals with a specific skill set required for a new project.
        Use: Facilitates the selection of appropriately skilled individuals for project assignments.

## Reflection

I think this was a good project it was a little frustrating using the ddl stuff as I have never done that and the errors sometimes were unclear when all I had to do was remove an extra comma. Learned a lot of stuff along the way. I had some extra time to play around with pandas to see how I can leverage sql commands and panadas for a personal project overall it was a better project than the last ome
